unordered_map<int,vector<int>>mp;
unordered_map<int, bool> visited;

int dfs(int root,int time,vector<bool>& hasApple)
{
    if(visited[root])
        return 0;
    
    visited[root]=true;
    
    int cnt=0;
    for(auto it:mp[root])
    {
        cnt+=dfs(it,2,hasApple);
    }
    if(cnt==0 && hasApple[root]==false)
        return 0;
    
    return time + cnt;
}
class Solution {
public:
    int minTime(int n, vector<vector<int>>& edges, vector<bool>& hasApple) {
        mp.clear();
        visited.clear();
        for(auto it:edges)
        {
            mp[it[0]].push_back(it[1]);
            mp[it[1]].push_back(it[0]);
        }
       return  dfs(0,0,hasApple);
        
    }
};
